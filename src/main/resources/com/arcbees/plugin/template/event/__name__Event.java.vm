#set ($endFunction = '()')
#set ($begFunction = 'get')
package ${package};


import com.google.gwt.event.shared.EventHandler;
import com.google.gwt.event.shared.GwtEvent;
import com.google.gwt.event.shared.HasHandlers;
import com.google.web.bindery.event.shared.HandlerRegistration;

public class ${name}Event extends GwtEvent<${name}Event.${name}Handler> {
    public interface Has${name}Handlers extends HasHandlers {
        HandlerRegistration addGlobalHandler(${name}Handler handler);
    }

    public interface ${name}Handler extends EventHandler {
        public void onGlobalEvent(${name}Event event);
    }
    
#set( $first = true )    
    public static void fire(HasHandlers source, #foreach ($param in $inputParameters)  #if ( !$first ),#end #set( $first = false ) $param.type $param.name #end) {
#set( $first = true ) 
        source.fireEvent(new ${name}Event(#foreach ($param in $inputParameters)  #if ( !$first ),#end #set( $first = false ) $param.name #end));
    }

    public static void fire(HasHandlers source, ${name}Event eventInstance) {
        source.fireEvent(eventInstance);
    }

    private static final Type<${name}Handler> TYPE = new Type<${name}Handler>();

	#foreach ($param in $inputParameters)
		private final $param.type $param.name;
	#end


#set( $first = true )

	public ${name}Event(#foreach ($param in $inputParameters)  #if ( !$first ),#end #set( $first = false ) final $param.type $param.name #end	) { 	
 
        #foreach ($param in $inputParameters)
		this.$param.name = $param.name;
		#end
        
    }

    public static Type<${name}Handler> getType() {
        return TYPE;
    }

    @Override
    public Type<${name}Handler> getAssociatedType() {
        return TYPE;
    }

	#foreach ($param in $inputParameters)
	  public $param.type $begFunction$param.funcName$endFunction {
	    return this.$param.name;
	  }	
	#end

    @Override
    protected void dispatch(${name}Handler handler) {
        handler.onGlobalEvent(this);
    }
}
