#set ($endFunction = '()')
#set ($begFunction = 'get')

public class ${name}Event extends GwtEvent<${name}Event.${name}Handler> {

	public interface ${name}Handler extends EventHandler {
    	void on${name}(${name}Event event);
	}
 
  	private static Type<${name}Handler> TYPE = new Type<${name}Handler>();
 
	public static void fire(HasEventBus source, String message) {
    	if (TYPE != null) {
      		source.fireEvent(new ${name}Event(message));
    	}
  	}
 
  	public static Type<${name}Handler> getType() {
		return TYPE;
  	}

#foreach ($param in $inputParameters)
	private final $param.type $param.name;
#end

#set( $first = true )

	public ${name}Event(#foreach ($param in $inputParameters)  #if ( !$first ),#end #set( $first = false ) final $param.type $param.name #end	) { 	
	
#foreach ($param in $inputParameters)
		this.$param.name = $param.name;
#end	

  	}
 
  	@Override
  	public Type<${name}Handler> getAssociatedType() {
    	return TYPE;
  	}
 
 	// TODO
	#foreach ($param in $inputParameters)
	  public $param.type $begFunction$param.funcName$endFunction {
	    return this.$param.name;
	  }	
	#end
 
  	@Override
  	protected void dispatch(${name}Handler handler) {
    	handler.on${name}(this);
  	}
}
